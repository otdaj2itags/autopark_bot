import logging
import os
import asyncio
import re
from math import ceil
from datetime import datetime, timedelta
from io import BytesIO

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

from car_holder_base import Base, User, Request

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from aiogram.types import BufferedInputFile
import calendar


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –í–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_TOKEN = '7546308673:AAFQI4zOYwjZtgM9Ra-uMURhdLYp9TMEwjY'

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///autopark.db', echo=False)
Session = sessionmaker(bind=engine)
session = Session()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏
class RequestState(StatesGroup):
    waiting_for_employee_name = State()
    waiting_for_purpose = State()
    waiting_for_reason = State()
    waiting_for_datetime = State()
    waiting_for_time = State()
    waiting_for_address = State()
    waiting_for_trip_type = State()
    waiting_for_driver_choice = State()
    waiting_for_notes = State()
    waiting_for_file = State()
    waiting_for_file_confirmation = State()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
class ApprovalState(StatesGroup):
    waiting_for_approval_note = State()
    waiting_for_rejection_note = State()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
USERS_PER_PAGE = 5
REQUESTS_PER_PAGE = 5

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=["start"]))
async def start_command(message: Message):
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –µ–≥–æ tg_id
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è username
    username = message.from_user.username if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å —Ä–æ–ª—å—é "–∑–∞–∫–∞–∑—á–∏–∫"
        full_name = message.from_user.first_name
        if message.from_user.last_name:
            full_name += f" {message.from_user.last_name}"

        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å "–∑–∞–∫–∞–∑—á–∏–∫" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        new_user = User(tg_id=message.from_user.id, full_name=full_name, username=username, role='–∑–∞–∫–∞–∑—á–∏–∫')
        session.add(new_user)
        session.commit()

        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}! –í–∞—à–∞ —Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ '–∑–∞–∫–∞–∑—á–∏–∫'. "
                             "–î–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    else:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ username, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if user.username != username:
            user.username = username
            session.commit()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons = []

    if user.role == '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        buttons = [
            [KeyboardButton(text="üìì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")],
            [KeyboardButton(text="‚õèÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")],
            [KeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
        ]

    elif user.role == '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–µ–ª–∞–º–∏':
        buttons = [
            [KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")]
        ]

    elif user.role == '–æ—Ñ–∏—Ü–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        buttons = [
            [KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")]
        ]

    elif user.role == '–º–µ—Ö–∞–Ω–∏–∫':
        buttons = [
            [KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")]
        ]

    elif user.role == '–∑–∞–∫–∞–∑—á–∏–∫':
        buttons = [
            [KeyboardButton(text="üñäÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")],
            [KeyboardButton(text="üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏")]
        ]

    # –°–æ–∑–¥–∞–Ω–∏–µ ReplyKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.full_name}! –í–∞—à–∞ —Ä–æ–ª—å: {user.role}", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /whoami
@dp.message(Command(commands=["whoami"]))
async def whoami_command(message: Message):
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if user:
        await message.answer(f"–í–∞—à–∞ —Ä–æ–ª—å: {user.role}")
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"
@dp.message(lambda message: message.text == "üñäÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É")
async def new_request_command(message: Message, state: FSMContext):

    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.")
        return

    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    if not user or user.role != '–∑–∞–∫–∞–∑—á–∏–∫':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏. –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '–∑–∞–∫–∞–∑—á–∏–∫' –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.")
        return

    logging.info(f"DEBUG: –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.full_name} ({user.tg_id}).")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")]],
    resize_keyboard=True
)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=markup)
    await state.set_state(RequestState.waiting_for_employee_name)

@dp.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def cancel_request(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.message(RequestState.waiting_for_employee_name)
async def request_employee_name_entered(message: Message, state: FSMContext):
    await state.update_data(employee_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –ø–æ–µ–∑–¥–∫–∏:")
    await state.set_state(RequestState.waiting_for_purpose)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–∏ –ø–æ–µ–∑–¥–∫–∏
@dp.message(RequestState.waiting_for_purpose)
async def request_purpose_entered(message: Message, state: FSMContext):
    await state.update_data(purpose=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏:")
    await state.set_state(RequestState.waiting_for_reason)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
@dp.message(RequestState.waiting_for_reason)
async def request_reason_entered(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    await show_custom_calendar(message, state)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def generate_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    inline_keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    inline_keyboard.append([InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="ignore")])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    inline_keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in days_of_week])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    for week in cal:
        row = [InlineKeyboardButton(text=str(day) if day != 0 else " ", callback_data=f"day:{year}-{month:02d}-{day:02d}") for day in week]
        inline_keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
    prev_button = InlineKeyboardButton(text="<", callback_data=f"change_month:{year}:{month - 1}")
    next_button = InlineKeyboardButton(text=">", callback_data=f"change_month:{year}:{month + 1}")
    inline_keyboard.append([prev_button, next_button])
    
    return InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
async def show_custom_calendar(message: Message, state: FSMContext):
    today = datetime.today()
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=generate_calendar(today.year, today.month))
    await state.set_state(RequestState.waiting_for_datetime)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
@dp.callback_query(lambda c: c.data and (c.data.startswith("day:") or c.data.startswith("change_month:")))
async def process_custom_calendar(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data.split(":")
    
    if data[0] == "day":  # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è
        selected_date = datetime.strptime(data[1], "%Y-%m-%d")
        await state.update_data(datetime_out=selected_date)
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {selected_date.strftime('%d-%m-%Y')}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É, –∑–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
        await state.set_state(RequestState.waiting_for_time)
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
        
    elif data[0] == "change_month":  # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        year, month = int(data[1]), int(data[2])
        if month < 1:  # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
            month, year = 12, year - 1
        elif month > 12:  # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
            month, year = 1, year + 1
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞
        await callback_query.message.edit_reply_markup(reply_markup=generate_calendar(year, month))

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.message(RequestState.waiting_for_time)
async def get_time(message: Message, state: FSMContext):
    try:
        time_str = message.text.strip()
        request_date = (await state.get_data())['datetime_out']
        datetime_out = datetime.strptime(f"{request_date.date()} {time_str}", "%Y-%m-%d %H:%M")
        await state.update_data(datetime_out=datetime_out)
        await message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: {datetime_out.strftime('%d-%m-%Y %H:%M')}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
        await state.set_state(RequestState.waiting_for_address)

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
@dp.message(RequestState.waiting_for_address)
async def request_address_entered(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await prompt_for_trip_type(message)
    await state.set_state(RequestState.waiting_for_trip_type)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –≤—ã–µ–∑–¥–∞ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
async def prompt_for_trip_type(message: Message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–ª—É–∂–µ–±–Ω—ã–π", callback_data="trip_type:—Å–ª—É–∂–µ–±–Ω—ã–π")],
            [InlineKeyboardButton(text="–õ–∏—á–Ω—ã–π", callback_data="trip_type:–ª–∏—á–Ω—ã–π")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–µ–∑–¥–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤—ã–µ–∑–¥–∞ (—Å–ª—É–∂–µ–±–Ω—ã–π –∏–ª–∏ –ª–∏—á–Ω—ã–π)
@dp.callback_query(RequestState.waiting_for_trip_type, lambda c: c.data.startswith("trip_type:"))
async def handle_trip_type(callback_query: CallbackQuery, state: FSMContext):
    trip_type = callback_query.data.split(":")[1]
    await state.update_data(business_trip=(trip_type == "—Å–ª—É–∂–µ–±–Ω—ã–π"))
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É "–° –≤–æ–¥–∏—Ç–µ–ª–µ–º" –∏–ª–∏ "–ë–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è"
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–° –≤–æ–¥–∏—Ç–µ–ª–µ–º", callback_data="driver_choice:—Å –≤–æ–¥–∏—Ç–µ–ª–µ–º")],
            [InlineKeyboardButton(text="–ë–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="driver_choice:–±–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è")]
        ]
    )
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –±–µ–∑:", reply_markup=markup)
    await state.set_state(RequestState.waiting_for_driver_choice)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–µ–∑–¥–∫–∏ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –±–µ–∑
@dp.callback_query(RequestState.waiting_for_driver_choice, lambda c: c.data.startswith("driver_choice:"))
async def handle_driver_choice(callback_query: CallbackQuery, state: FSMContext):
    driver_choice = callback_query.data.split(":")[1]
    await state.update_data(with_driver=(driver_choice == "—Å –≤–æ–¥–∏—Ç–µ–ª–µ–º"))
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_note")]
        ]
    )
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ø–æ–µ–∑–¥–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=markup)
    await state.set_state(RequestState.waiting_for_notes)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∏–ª–∏ –≤—ã–±–æ—Ä–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.message(RequestState.waiting_for_notes)
async def request_notes_prompt(message: Message, state: FSMContext):
    await state.update_data(notes=message.text)
    await prompt_for_file(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query(RequestState.waiting_for_notes, lambda c: c.data == "skip_note")
async def skip_note_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(notes="–ù–µ—Ç")
    await callback_query.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await prompt_for_file(callback_query.message)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
async def prompt_for_file(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="attach_file")],
        [InlineKeyboardButton(text="–ë–µ–∑ —Ñ–∞–π–ª–∞", callback_data="no_file")]
    ])
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ë–µ–∑ —Ñ–∞–π–ª–∞"
@dp.callback_query(lambda c: c.data == "no_file")
async def handle_no_file(callback_query: CallbackQuery, state: FSMContext):
    await finalize_request(callback_query, state, with_file=False)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
@dp.callback_query(lambda c: c.data == "attach_file")
async def handle_attach_file(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, PDF –∏ —Ç.–¥.)")
    await state.set_state(RequestState.waiting_for_file)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@dp.message(RequestState.waiting_for_file, lambda message: message.content_type in [types.ContentType.DOCUMENT, types.ContentType.PHOTO])
async def handle_file_upload(message: Message, state: FSMContext):
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_name = "–§–æ—Ç–æ"

    await state.update_data(file_id=file_id, file_name=file_name)
    await message.answer("–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω.")
    await finalize_request(message, state, with_file=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
async def finalize_request(message_or_callback, state: FSMContext, with_file: bool):
    data = await state.get_data()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–æ–π
    request_info = (
        f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:\n"
        f"<b>–§–ò–û: {data['employee_name']}</b>\n"
        f"<i>–¶–µ–ª—å: {data['purpose']}</i>\n"
        f"–û—Å–Ω–æ–≤–∞–Ω–∏–µ: {data['reason']}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['datetime_out']}\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–¢–∏–ø –≤—ã–µ–∑–¥–∞: {'–°–ª—É–∂–µ–±–Ω—ã–π' if data['business_trip'] else '–õ–∏—á–Ω—ã–π'}\n"
        f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if data['with_driver'] else '–ù–µ—Ç'}\n"
        f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {data['notes']}\n"
    )

    if with_file:
        request_info += f"–§–∞–π–ª: {data.get('file_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_request")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_request")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(request_info, reply_markup=markup, parse_mode='HTML')
    elif isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.message.answer(request_info, reply_markup=markup, parse_mode='HTML')

    await state.set_state(RequestState.waiting_for_file_confirmation)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏
@dp.callback_query(lambda c: c.data in ["send_request", "cancel_request"])
async def handle_request_confirmation(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if callback_query.data == "send_request":
        user = session.query(User).filter_by(tg_id=callback_query.from_user.id).first()

        new_request = Request(
            employee_name=data['employee_name'],
            purpose=data['purpose'],
            reason=data['reason'],
            datetime_out=data['datetime_out'],
            address=data['address'],
            business_trip=data['business_trip'],
            with_driver=data['with_driver'],
            status='–Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏',
            manager_approval_1=False,
            manager_approval_2=False,
            requester=user.id,
            notes=data['notes']
        )
        session.add(new_request)
        session.commit()

        if 'file_id' in data:
            await send_request_notifications(new_request.id, file_id=data['file_id'], file_name=data['file_name'])
        else:
            await send_request_notifications(new_request.id)

        await callback_query.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ!")
    else:
        await callback_query.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await callback_query.message.edit_reply_markup(reply_markup=None)
    await state.clear()
    await callback_query.answer()


font_path = r"C:\Users\MIX\Desktop\dejavu\DejaVuSans.ttf"

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è –∑–∞—è–≤–∫–∏
def generate_request_pdf(request):
    buffer = BytesIO()
    pdf = canvas.Canvas(buffer, pagesize=A4)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
    pdfmetrics.registerFont(TTFont("FreeSans", font_path))
    pdf.setFont("FreeSans", 12)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç FreeSans –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    
    width, height = A4
    margin = 40  # –ü–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    
    # –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    text_content = (
        f"–ó–∞—è–≤–∫–∞ ID: {request.id}\n"
        f"–§–ò–û: {request.employee_name}\n"
        f"–¶–µ–ª—å: {request.purpose}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {request.datetime_out.strftime('%d-%m-%Y %H:%M')}\n"
        f"–ê–¥—Ä–µ—Å: {request.address}\n"
        f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if request.with_driver else '–ù–µ—Ç'}\n"
        f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {request.notes}"
    )

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å–≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    y_position = height - margin
    for line in text_content.split('\n'):
        pdf.drawString(margin, y_position, line)
        y_position -= 15  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏

    pdf.showPage()
    pdf.save()
    buffer.seek(0)
    return buffer

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏"
@dp.message(lambda message: message.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏")
async def view_own_requests(message: Message, state: FSMContext):
    current_state = await state.get_state()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, —Å–±—Ä–æ—Å–∏–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state and current_state.startswith("RequestState"):
        await state.clear()

    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    if not user or user.role != '–∑–∞–∫–∞–∑—á–∏–∫':
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.")
        return

    # –í—ã–≤–æ–¥ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_requests = session.query(Request).filter_by(requester=user.id).all()
    if not user_requests:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    response = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for req in user_requests:
        response += (f"ID: {req.id}\n"
                     f"<b>–§–ò–û: {req.employee_name}</b>\n"
                     f"<i>–¶–µ–ª—å: {req.purpose}</i>\n"
                     f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {req.datetime_out}\n"
                     f"–ê–¥—Ä–µ—Å: {req.address}\n"
                     f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if req.with_driver else '–ù–µ—Ç'}\n"
                     f"–°—Ç–∞—Ç—É—Å: {req.status}\n\n")

    await message.answer(response, parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
async def send_request_notifications(request_id: int, file_id=None, file_name=None):
    new_request = session.query(Request).filter_by(id=request_id).first()

    manager_users = session.query(User).filter(User.role.in_(['—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–µ–ª–∞–º–∏', '–æ—Ñ–∏—Ü–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'])).all()
    for manager in manager_users:
        try:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û–¥–æ–±—Ä–∏—Ç—å‚úÖ", callback_data=f"approve_request:{new_request.id}"),
                    InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå", callback_data=f"reject_request:{new_request.id}")
                ]
            ])

            message_text = (
                f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ:\n"
                f"<b>–§–ò–û: {new_request.employee_name}</b>\n"
                f"<i>–¶–µ–ª—å: {new_request.purpose}</i>\n"
                f"–û—Å–Ω–æ–≤–∞–Ω–∏–µ: {new_request.reason}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {new_request.datetime_out.strftime('%d-%m-%Y %H:%M') if new_request.datetime_out else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ê–¥—Ä–µ—Å: {new_request.address}\n"
                f"–¢–∏–ø –≤—ã–µ–∑–¥–∞: {'–°–ª—É–∂–µ–±–Ω—ã–π' if new_request.business_trip else '–õ–∏—á–Ω—ã–π'}\n"
                f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if new_request.with_driver else '–ù–µ—Ç'}\n"
                f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {new_request.notes}\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–æ–±—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."
            )

            if file_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                await bot.send_document(
                    chat_id=manager.tg_id,
                    document=file_id,
                    caption=message_text,
                    reply_markup=markup,
                    parse_mode='HTML'
                )
            else:
                await bot.send_message(
                    chat_id=manager.tg_id,
                    text=message_text,
                    reply_markup=markup,
                    parse_mode='HTML'
                )

        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager.tg_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
@dp.callback_query(lambda c: c.data.startswith("approve_request:"))
async def approve_request_start(callback_query: CallbackQuery, state: FSMContext):
    request_id = int(callback_query.data.split(":")[1])
    await state.update_data(request_id=request_id)

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_note")]
    ])

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ–¥–æ–±—Ä–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=markup)
    await state.set_state(ApprovalState.waiting_for_approval_note)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
async def process_request_approval(user, request, note):
    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–µ–ª–∞–º–∏' and not request.manager_approval_1:
        request.manager_approval_1 = True
        request.notes = (request.notes or '') + f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –¥–µ–ª–∞–º–∏: {note}"
        logging.info(f"–ó–∞—è–≤–∫–∞ {request.id} –æ–¥–æ–±—Ä–µ–Ω–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –¥–µ–ª–∞–º–∏")

    elif user.role == '–æ—Ñ–∏—Ü–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' and not request.manager_approval_2:
        request.manager_approval_2 = True
        request.notes = (request.notes or '') + f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ—Ç –æ—Ñ–∏—Ü–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {note}"
        logging.info(f"–ó–∞—è–≤–∫–∞ {request.id} –æ–¥–æ–±—Ä–µ–Ω–∞ –æ—Ñ–∏—Ü–µ—Ä–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    else:
        logging.info(f"–ó–∞—è–≤–∫–∞ {request.id} –Ω–µ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.role}) —É–∂–µ –¥–∞–≤–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤.")
        return "–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –≤–∞–º–∏ –∏–ª–∏ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –µ–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è."

    # –ï—Å–ª–∏ –æ–±–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–¥–æ–±—Ä–∏–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if request.manager_approval_1 and request.manager_approval_2:
        request.status = '–æ–¥–æ–±—Ä–µ–Ω–∞'
        logging.info(f"–ó–∞—è–≤–∫–∞ {request.id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–µ–Ω–∞.")

         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
        requester = session.query(User).filter_by(id=request.requester).first()
        if requester:
            try:
                await bot.send_message(
                    chat_id=requester.tg_id,
                    text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ (ID: {request.id}) –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏–º –¥–µ–ª–∞–º–∏ –∏ –æ—Ñ–∏—Ü–µ—Ä–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                )
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑—á–∏–∫—É {requester.full_name} (tg_id: {requester.tg_id})")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É {requester.full_name} (tg_id: {requester.tg_id}): {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session.commit()

    return "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
@dp.callback_query(lambda c: c.data == "skip_note")
async def skip_note_handler(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    request_id = data.get('request_id')

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = session.query(User).filter_by(tg_id=callback_query.from_user.id).first()
    request = session.query(Request).filter_by(id=request_id).first()

    # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result_message = await process_request_approval(user, request, note="")

    await callback_query.message.answer(result_message)
    await state.clear()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
@dp.message(ApprovalState.waiting_for_approval_note)
async def approve_request_with_note(message: Message, state: FSMContext):
    note = message.text
    data = await state.get_data()
    request_id = data['request_id']
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    request = session.query(Request).filter_by(id=request_id).first()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = await process_request_approval(user, request, note)
    await message.answer(result_message)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
@dp.callback_query(lambda c: c.data.startswith("reject_request:"))
async def reject_request_start(callback_query: CallbackQuery, state: FSMContext):
    request_id = int(callback_query.data.split(":")[1])
    await state.update_data(request_id=request_id)

    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_note_reject")]
    ])

    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.", reply_markup=markup)
    await state.set_state(ApprovalState.waiting_for_rejection_note)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
@dp.callback_query(lambda c: c.data == "skip_note_reject")
async def skip_note_reject_handler(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    request_id = data.get('request_id')

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = session.query(User).filter_by(tg_id=callback_query.from_user.id).first()
    request = session.query(Request).filter_by(id=request_id).first()

    # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
    request.status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    session.commit()

    await callback_query.message.answer(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    requester = session.query(User).filter_by(id=request.requester).first()
    if requester:
        await bot.send_message(
            chat_id=requester.tg_id,
            text=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ (ID: {request_id}) –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {user.role}. ‚ùå"
        )

    await state.clear()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
@dp.message(ApprovalState.waiting_for_rejection_note)
async def reject_request_with_note(message: Message, state: FSMContext):
    note = message.text
    data = await state.get_data()
    request_id = data['request_id']
    request = session.query(Request).filter_by(id=request_id).first()
    request.status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    request.notes = (request.notes or '') + f"\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {note}"
    session.commit()

    await message.answer(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    requester = session.query(User).filter_by(id=request.requester).first()
    if requester:
        await bot.send_message(
            chat_id=requester.tg_id,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ (ID: {request_id}) –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ {user.role}. –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note}"
        )

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"
@dp.message(lambda message: message.text == "üìì –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏")
async def requests_command(message: Message):
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if not user or user.role not in ['—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–µ–ª–∞–º–∏', '–æ—Ñ–∏—Ü–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–º–µ—Ö–∞–Ω–∏–∫', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫.")
        return

    requests = session.query(Request).all()

    if not requests:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    response = "–í—Å–µ –∑–∞—è–≤–∫–∏:\n\n"
    for req in requests:
        response += (f"ID: {req.id}, –§–ò–û: {req.employee_name}, –¶–µ–ª—å: {req.purpose}, "
                     f"–û—Å–Ω–æ–≤–∞–Ω–∏–µ: {req.reason}, –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {req.datetime_out.strftime('%d-%m-%Y %H:%M') if req.datetime_out else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}, "
                     f"–ê–¥—Ä–µ—Å: {req.address}, –°—Ç–∞—Ç—É—Å: {req.status}, "
                     f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if req.with_driver else '–ù–µ—Ç'}\n")

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
@dp.message(lambda message: message.text == "‚õèÔ∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
async def handle_set_user_role(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <tg_id> <—Ä–æ–ª—å>")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–≤–æ–¥–æ–º tg_id –∏ —Ä–æ–ª–∏
@dp.message(lambda message: re.match(r"^\d+ .+$", message.text))
async def process_role_assignment(message: Message):
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()
    # admin_user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    # if not admin_user or admin_user.role != '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
    #     await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.")
    #     return
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.‚öíÔ∏è")
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É: –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - tg_id, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —Ä–æ–ª—å
        split_message = message.text.split(maxsplit=1)
        tg_id = int(split_message[0])
        role = split_message[1].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = session.query(User).filter_by(tg_id=tg_id).first()
        if not user:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_member = await bot.get_chat(tg_id)
            full_name = f"{chat_member.first_name} {chat_member.last_name}" if chat_member.last_name else chat_member.first_name
            username = chat_member.username if chat_member.username else "–ù–µ —É–∫–∞–∑–∞–Ω"

            new_user = User(tg_id=tg_id, full_name=full_name, username=username, role=role)
            session.add(new_user)
            session.commit()

            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é: {role}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.role = role
            session.commit()
            await message.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {role}")

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <tg_id> <—Ä–æ–ª—å>")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
@dp.message(lambda message: message.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
async def view_pending_requests(message: Message):
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if not user or user.role not in ['—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–µ–ª–∞–º–∏', '–æ—Ñ–∏—Ü–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == '—É–ø—Ä–∞–≤–ª—è—é—â–∏–π –¥–µ–ª–∞–º–∏':
        pending_requests = session.query(Request).filter_by(manager_approval_1=False).all()
    elif user.role == '–æ—Ñ–∏—Ü–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏':
        pending_requests = session.query(Request).filter_by(manager_approval_2=False).all()

    if not pending_requests:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = "–ó–∞—è–≤–∫–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n"
    for req in pending_requests:
        response += (f"ID: {req.id}, –§–ò–û: {req.employee_name}, –¶–µ–ª—å: {req.purpose}, "
                     f"–û—Å–Ω–æ–≤–∞–Ω–∏–µ: {req.reason}, –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {req.datetime_out.strftime('%d-%m-%Y %H:%M') if req.datetime_out else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}, "
                     f"–ê–¥—Ä–µ—Å: {req.address}, –°—Ç–∞—Ç—É—Å: {req.status}, "
                     f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if req.with_driver else '–ù–µ—Ç'}\n\n")

    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"
@dp.message(lambda message: message.text == "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
async def view_approved_requests_by_month(message: Message):
    user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if not user or user.role != '–º–µ—Ö–∞–Ω–∏–∫':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –∏ –¥–æ —Å–ª–µ–¥—É—é—â–∏—Ö 12 –º–µ—Å—è—Ü–µ–≤
    today = datetime.today()
    months = [(today + timedelta(days=30*i)).strftime("%B %Y") for i in range(12)]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    buttons = [[InlineKeyboardButton(text=month.capitalize(), callback_data=f"select_month:{month}")] for month in months]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
@dp.callback_query(lambda callback_query: callback_query.data.startswith("select_month:"))
async def handle_month_selection(callback_query: CallbackQuery):
    selected_month = callback_query.data.split(":")[1]

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
    await paginate_requests(callback_query.message, selected_month, page=1)
    await callback_query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ —Å –Ω–∞—á–∞–ª–æ–º –æ—Ç —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
async def paginate_requests(message: Message, selected_month: str, page: int = None):
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    month_start = datetime.strptime(selected_month, "%B %Y")
    next_month = month_start + timedelta(days=31)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    approved_requests = session.query(Request).filter(
        Request.manager_approval_1 == True,
        Request.manager_approval_2 == True,
        Request.datetime_out >= month_start,
        Request.datetime_out < next_month
    ).order_by(Request.datetime_out.desc()).all()

    if not approved_requests:
        await message.answer(f"–ù–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ {selected_month}.")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = ceil(len(approved_requests) / REQUESTS_PER_PAGE)
    
    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π)
    if page is None:
        page = total_pages

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (total_pages - page) * REQUESTS_PER_PAGE
    end_index = start_index + REQUESTS_PER_PAGE
    current_requests = approved_requests[start_index:end_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞—è–≤–∫–∞—Ö
    response = f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ {selected_month} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
    for req in current_requests:
        response += (f"ID: {req.id}, –§–ò–û: {req.employee_name}, –¶–µ–ª—å: {req.purpose}, "
                     f"–û—Å–Ω–æ–≤–∞–Ω–∏–µ: {req.reason}, –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {req.datetime_out.strftime('%d-%m-%Y %H:%M')}, "
                     f"–ê–¥—Ä–µ—Å: {req.address}, –° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if req.with_driver else '–ù–µ—Ç'}\n\n")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    buttons = []
    if page > 1:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ø–µ—Ä–µ–¥", callback_data=f"requests_page:{selected_month}:{page-1}"))
    if page < total_pages:
        buttons.append(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚û°Ô∏è", callback_data=f"requests_page:{selected_month}:{page+1}"))

    markup = InlineKeyboardMarkup(inline_keyboard=[buttons] if buttons else [])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await message.answer(response, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞—è–≤–æ–∫
@dp.callback_query(lambda callback_query: callback_query.data.startswith("requests_page:"))
async def handle_request_pagination(callback_query: CallbackQuery):
    data = callback_query.data.split(":")
    selected_month = data[1]
    page = int(data[2])

    await paginate_requests(callback_query.message, selected_month, page)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
@dp.message(lambda message: message.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_roles_command(message: Message):
    admin_user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if not admin_user or admin_user.role != '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    users = session.query(User).all()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        username = user.username if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        response += f"ID: {user.tg_id}, Full Name: {user.full_name}, Username: {username}, –†–æ–ª—å: {user.role}\n"

    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@dp.message(lambda message: message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def start_user_deletion(message: Message):
    await show_user_page_with_rights_check(message, page=1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
async def show_user_page_with_rights_check(message: Message, page: int = 1):
    admin_user = session.query(User).filter_by(tg_id=message.from_user.id).first()

    if not admin_user or admin_user.role != '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await show_user_page_without_rights_check(message, page)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
async def show_user_page_without_rights_check(message: Message, page: int = 1):
    users = session.query(User).all()

    if not users:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = ceil(len(users) / USERS_PER_PAGE)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * USERS_PER_PAGE
    end_index = start_index + USERS_PER_PAGE
    current_users = users[start_index:end_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons = [
        [InlineKeyboardButton(text=f"{user.full_name} ({user.username})", callback_data=f"delete_user:{user.tg_id}")]
        for user in current_users
    ]

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    navigation_buttons = []
    if page > 1:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_page:{page - 1}"))
    if page < total_pages:
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"user_page:{page + 1}"))

    if navigation_buttons:
        buttons.append(navigation_buttons)

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.callback_query(lambda callback_query: callback_query.data.startswith("user_page:"))
async def paginate_users(callback_query: CallbackQuery):
    page = int(callback_query.data.split(":")[1])
    await show_user_page_without_rights_check(callback_query.message, page)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda callback_query: callback_query.data.startswith("delete_user:"))
async def delete_user(callback_query: CallbackQuery):
    tg_id = int(callback_query.data.split(":")[1])

    user = session.query(User).filter_by(tg_id=tg_id).first()

    if not user:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    session.delete(user)
    session.commit()

    await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –±—ã–ª —É–¥–∞–ª–µ–Ω.‚úîÔ∏è")
    await callback_query.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    await show_user_page_without_rights_check(callback_query.message, page=1)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–æ–≤
async def notify_mechanics_background():
    while True:
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        approved_requests = session.query(Request).filter(
            Request.status == '–æ–¥–æ–±—Ä–µ–Ω–∞',
            Request.notified_mechanics == False
        ).all()

        for request in approved_requests:
            mechanic_users = session.query(User).filter_by(role='–º–µ—Ö–∞–Ω–∏–∫').all()

            if not mechanic_users:
                requester = session.query(User).filter_by(id=request.requester).first()
                if requester:
                    await bot.send_message(
                        chat_id=requester.tg_id,
                        text=f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞—è–≤–∫–∏ {request.id}."
                    )
                request.notified_mechanics = True
                session.commit()
                continue
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∫–∞–∫ BufferedInputFile
            pdf_file = generate_request_pdf(request)
            pdf_input_file = BufferedInputFile(pdf_file.getvalue(), filename="request_details.pdf")

            for mechanic in mechanic_users:
                try:
                    await bot.send_message(
                        chat_id=mechanic.tg_id,
                        text=(
                            f"–ó–∞—è–≤–∫–∞ {request.id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞:‚úÖ\n"
                            f"–§–ò–û: {request.employee_name}\n"
                            f"–¶–µ–ª—å: {request.purpose}\n"
                            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {request.datetime_out.strftime('%d-%m-%Y %H:%M')}\n"
                            f"–ê–¥—Ä–µ—Å: {request.address}\n"
                            f"–° –≤–æ–¥–∏—Ç–µ–ª–µ–º: {'–î–∞' if request.with_driver else '–ù–µ—Ç'}\n"
                            f"–ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {request.notes}\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å."
                        )
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª —á–µ—Ä–µ–∑ BufferedInputFile
                    await bot.send_document(
                        chat_id=mechanic.tg_id,
                        document=pdf_input_file,
                        caption="–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–æ–º PDF."
                    )

                    logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ—Ö–∞–Ω–∏–∫—É {mechanic.full_name} (tg_id: {mechanic.tg_id})")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫—É {mechanic.full_name} (tg_id: {mechanic.tg_id}): {e}")

            request.notified_mechanics = True
            session.commit()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def on_startup():
    asyncio.create_task(notify_mechanics_background())
    logging.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
async def add_admin():
    admin_tg_id = 726797566  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID
    existing_admin = session.query(User).filter_by(tg_id=admin_tg_id).first()

    if not existing_admin:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ Telegram
        try:
            chat_member = await bot.get_chat(admin_tg_id)
            full_name = f"{chat_member.first_name} {chat_member.last_name}" if chat_member.last_name else chat_member.first_name
            username = chat_member.username if chat_member.username else "–ù–µ —É–∫–∞–∑–∞–Ω"

            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            admin_user = User(tg_id=admin_tg_id, full_name=full_name, username=username, role='–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
            session.add(admin_user)
            session.commit()
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_tg_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {admin_tg_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    await add_admin()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    await on_startup()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

